#! /usr/bin/env python

'''
Program: generate and submit pbs files for RMG/qe, etc.
         save run configurations for later debug
    zjyx, @2017/02, ORNL

ChangeLogs:
    1. remove queue tags, which will be determined by walltime and host
        automatically.
    2. change param's 'type' from type+_type+__type to [type, type];
       change format of str to 'str'
    3. add support for qe
    4. add module options;
       add suppot for vasp
    5. add check_input function

TODO:
    add support for castep

USAGE:
    pbstool ($pbs.conf file)
    where pbstool should be in system's environment varialbe $PATH, and 
    $pbs.conf is the control file for this script, which should follow the 
    following format:
    -----------------------------------------------------------------------
    # required
    NODES       = 16
    TIME        = 100 20 # in units of hrs, mins
    EXEINPUT    = rmg.in
    EXEPATH     = /home/z8j/bin/rmg-cpu
    THREADS     = 2
    
    # optional
    NAME        = surface-pbe221-rlx
    IS_SUBMIT   = true
    QUEUE       = None
    EXEOUTPUT   = none
    MODULE      = PrgEnv-gnu
    MODULE      = fftw
    ------------------------------------------------------------------------
    If $pbs.conf not specified, pbs.conf will be read by default.

'''

import os
import sys
from pbs.pbs_confs import *
from pbs.pbs_parser import *

# environment variables
class InitEnv:
    def __init__(self):
        self._user = None
        self._host = None
        self._pwd  = None
        self._home_path = None

        self._set_all()

    def _set_all(self):
        self._set_user()
        self._set_host()
        self._set_pwd()
        self._set_home_path()

    def _set_user(self):
        import getpass
        self._user = getpass.getuser()

    def get_user(self):
        return self._user

    def _set_host(self):
        import socket
        hostname = socket.gethostname()
        if 'or-condo' in hostname:
            self._host = 'Cades'
        elif 'h2o' in hostname:
            self._host = 'BlueWaters'
        elif 'titan' in hostname:
            self._host = 'Titan'
        else:
            self._host = hostname
            print 'Warning: Unknown host.'

    def get_host(self):
        return self._host

    def _set_pwd(self):
        self._pwd = os.getcwd()

    def get_pwd(self):
        return self._pwd

    def _set_home_path(self):
        self._home_path = os.path.expanduser('~')

    def get_home_path(self):
        return self._home_path



# check if settings make sense, and correct them
def validate_params(pbs_conf, init_env):

    # if not set in pbs.conf, then use its default value defined
    for key in param_prop:
        if not key in pbs_conf._params:
            pbs_conf.set_param(key, param_prop[key]['default'])

    # DO NOT change orders of following lines
    pbs_conf.validate_exepath()
    pbs_conf.validate_name(init_env.get_pwd())
    pbs_conf.validate_is_submit()
    pbs_conf.validate_cores()
    pbs_conf.validate_threads()
    # BEWARE: exepath must be in front of exeinput
    pbs_conf.validate_exeinput()
    pbs_conf.validate_exeoutput()
    pbs_conf.validate_module()
    pbs_conf.validate_queue(init_env.get_host())


def PBSRun(init_env, pbs_conf):

    with open('pbs.%s'% pbs_conf._params['exename'].lower(), 'rb') as f:
        lines_pbs = f.read()

    if pbs_conf._params['exename'] == 'VASP':
        lines_in = ""
        for _input in pbs_conf._params['exeinput']:
            lines_in += "\n%s\n"% _input
            with open(_input, 'rb') as f:
                lines_in += f.read()
    else:
        with open('%s'% pbs_conf._params['exeinput'], 'rb') as f:
            lines_in = f.read()
    
    lines_conf = ''
    lines_conf += '#! /bin/bash'+'\n\n'
    lines_conf += 'Computer name: %s'%init_env.get_host() + '\n\n'
    lines_conf += '*'*80+'\n'
    lines_conf += '*'+' '*30+'PBS LINES: %6d'%len(lines_pbs)+' '*31+'*\n'
    lines_conf += '*'*80+'\n\n'
    lines_conf += '-'*80+'\n'
    lines_conf += lines_pbs
    lines_conf += '-'*80+'\n\n'
    lines_conf += '*'*80+'\n'
    lines_conf += '*'+' '*29+'INPUT LINES: %6d'%(len(lines_in))+' '*30+'*\n'
    lines_conf += '*'*80+'\n\n'
    lines_conf += '-'*80+'\n'
    lines_conf += lines_in
    lines_conf += '-'*80+'\n\n'
    
    # submit pbs
    if pbs_conf._params['is_submit']:
        print "Submitting jobs..."
        os.system('qsub pbs.%s'% pbs_conf._params['exename'].lower())

        # save configurations: including input file and pbs file
        i = 0
        while os.path.isfile('runenv.%02d'%(i)):
            i += 1
    
        with open('runenv.%02d'% i, 'wb') as f:
            f.write(lines_conf)

    # echo pbs conf to screen
    print "\nPBS configurations:"
    print "-"*60
    print "%s"% ''.join(lines_pbs)
    print "-"*60

if __name__ == "__main__":

    print '\n'

    if len(sys.argv) > 1:
        filename = sys.argv[1]
    else:
        filename = 'pbs.conf'

    if not os.path.isfile(filename):
        print("PBS conf file not found, exit.")
        sys.exit(1)

    init_env = InitEnv()
    os.system('export PYTHONPATH=$PYTHONPATH:%s'% init_env.get_pwd())

    pbs_conf = ConfParser(filename)
    # print pbs_conf._params
    validate_params(pbs_conf, init_env)
    #print pbs_conf._params

    write_pbs(init_env, pbs_conf)

    PBSRun(init_env, pbs_conf)
